---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: create-push-ci-image
  annotations:
    pipelinesascode.tekton.dev/on-cel-expression: |
      "Dockerfile.CI".pathChanged() && ( event == "push" || event == "pull_request" )
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  taskRunSpecs:
    - pipelineTaskName: skopeo-copy
      serviceAccountName: builder
  params:
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
      - name: images-url
      - name: dockerconfig
    tasks:
      - name: fetch-repository
        taskRef:
          kind: ClusterTask
          name: git-clone
        workspaces:
          - name: output
            workspace: source
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: generate-image-name
        taskSpec: 
          results:
            - name: image-name
            - name: image-name-timestamp
          steps: 
            - name: generate-image-name
              image: quay.io/openshift-pipeline/ci
              script: | 
                #!/usr/bin/env bash
                BRANCH_NAME={{ target_branch }}
                IMAGE_NAME=""
                IMAGE_NAME_TIMESTAMP=""
                REPOSITORY=""
                TIMESTAMP=$(date +"%y%m%d%H%M")

                if [ "$BRANCH_NAME" == "master" ]; then 
                  if [ {{ event_type }} == "pull_request" ]; then
                      IMAGE_NAME="image-registry.openshift-image-registry.svc:5000/pipelines-ci/ci:latest"
                      IMAGE_NAME_TIMESTAMP="image-registry.openshift-image-registry.svc:5000/pipelines-ci/ci:5.0-$TIMESTAMP"
                      REPOSITORY="image-registry"
                  else
                      IMAGE_NAME="quay.io/openshift-pipeline/ci:latest"
                      IMAGE_NAME_TIMESTAMP="quay.io/openshift-pipeline/ci:5.0-$TIMESTAMP"
                      REPOSITORY="quay.io"
                  fi
                elif [[ "$BRANCH_NAME" == release-* ]]; then 
                  if [ {{ event_type }} == "pull_request" ]; then
                    IMAGE_NAME="image-registry.openshift-image-registry.svc:5000/pipelines-ci/ci:${BRANCH_NAME#release-}"
                    REPOSITORY="image-registry"
                  else
                    IMAGE_NAME="quay.io/openshift-pipeline/ci:${BRANCH_NAME#release-}"
                    REPOSITORY="quay.io"
                  fi
                  IMAGE_NAME_TIMESTAMP="$IMAGE_NAME-$TIMESTAMP"
                else
                    echo "Error: Branch name '$BRANCH_NAME' is not appropriate."
                    exit 1
                fi

                echo -n "$IMAGE_NAME" | tee $(results.image-name.path)
                echo -n "$IMAGE_NAME_TIMESTAMP" | tee $(results.image-name-timestamp.path)
        runAfter: 
          - fetch-repository
      - name: buildah-push
        taskRef:
          kind: ClusterTask
          name: buildah
        params:
          - name: IMAGE
            value: $(tasks.generate-image-name.results.image-name)
          - name: DOCKERFILE
            value: ./Dockerfile.CI
        runAfter: 
          - generate-image-name
        workspaces:
          - name: source
            workspace: source
          - name: dockerconfig
            workspace: dockerconfig
        when: 
          - input: "{{ event_type }}"
            operator: in 
            values: 
              - "push"
      - name: buildah-pull-request
        taskRef: 
          kind: ClusterTask
          name: buildah
        params:
          - name: IMAGE
            value: $(tasks.generate-image-name.results.image-name)
          - name: DOCKERFILE
            value: ./Dockerfile.CI
        runAfter: 
          - generate-image-name
        workspaces:
          - name: source
            workspace: source
        when: 
          - input: "{{ event_type }}"
            operator: in 
            values: 
              -  "pull_request"
      - name: skopeo-copy
        taskRef: 
          kind: ClusterTask
          name: skopeo-copy
        workspaces:
          - name: images-url
            workspace: images-url
        params:
          - name: srcImageURL
            value: docker://$(tasks.generate-image-name.results.image-name)
          - name: destImageURL
            value: docker://$(tasks.generate-image-name.results.image-name-timestamp)
        runAfter:
          - buildah-push
          - buildah-pull-request
          
    finally:
      - name: send-slack-notification
        taskRef:
          resolver: cluster
          params: 
          - name: kind
            value: task
          - name: name
            value: send-slack-notification
          - name: namespace
            value: pipelines-ci
        params:
          - name: MESSAGE
            value: "<icon> Uploading CI image *<run_status>* <icon> <<logs_url>|logs>"
        when:
          - input: $(tasks.skopeo-copy.status)
            operator: in
            values: ["Failed", "None"]
          - input: "{{ event_type }}"
            operator: in 
            values: 
              - "push"

  workspaces:
    - name: dockerconfig
      secret: 
        secretName: quay-io-dockerconfig
    - name: images-url
      emptyDir: {}
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi