---
# Task writes "some stuff" to a predefined path in the workspace
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-file-v1b1
spec:
  results:
    - name: output-file
      description: Name of directory used to create a new file
  steps:
    - name: read
      image: image-registry.openshift-image-registry.svc:5000/openshift/golang
      script: |
        #!/usr/bin/env bash
        echo $(workspaces.test.path) && ls -la $(workspaces.test.path)
    - name: write-new-stuff
      image: image-registry.openshift-image-registry.svc:5000/openshift/golang
      script: |
        #!/usr/bin/env bash
        OUTPUT_FILE=$(context.task.name)-$RANDOM
        echo "some stuff" > $(workspaces.test.path)/${OUTPUT_FILE}
        echo -n ${OUTPUT_FILE} | tee $(results.output-file.path)
  workspaces:
    - name: test
---
# Reads a file from a predefined path in the workspace
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-file-exists-v1b1
  annotations:
    release-tests-task: "test"
spec:
  params:
    - name: FILE
  steps:
    - name: read
      image: image-registry.openshift-image-registry.svc:5000/openshift/golang
      script: |
        #!/usr/bin/env bash
        if [ ! -f $(workspaces.test.path)/$(params.FILE) ]; then
          echo "File stuff doesn't exist!"
          exit 1
        fi
        cat $(workspaces.test.path)/$(params.FILE)
  workspaces:
    - name: test
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: output-pipeline-v1b1
  annotations:
    release-tests-pipeline: "test"
spec:
  tasks:
    - name: create-file
      taskRef:
        name: create-file-v1b1
      workspaces:
        - name: test
          workspace: test
    - name: check-file-exists
      params:
        - name: FILE
          value: $(tasks.create-file.results.output-file)
      runAfter:
        - create-file
      taskRef:
        name: check-file-exists-v1b1
      workspaces:
        - name: test
          workspace: test
  workspaces:
    - name: test
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: output-pipeline-run-v1b1
  annotations:
    release-tests-pipelinerun: "test"
spec:
  pipelineRef:
    name: output-pipeline-v1b1
  workspaces:
    - name: test
      persistentVolumeClaim:
        claimName: shared-pvc
